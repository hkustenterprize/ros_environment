/**
 * Beck Pang, system identification node, hardcode
 */

#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <cmath>
#include <chrono>

using namespace std;

ros::Publisher cmd_vel_publisher;

string cmd_topic;

/**
 * create excitement signal with N frequency, P period in each frequency
 * for the 2017/12/06, N = 30, and the excitation signal are generated by matlab
 */
volatile double stop_time_table[31];

int P = 5;
int N = 30;
float gain = 500.0f;


int main(int argc, char* argv[]){
    ros::init(argc,argv,"system_identification_node");
    ros::NodeHandle nh("~");

    nh.param("cmd_topic", cmd_topic, string("/system_iden_cmd_vel"));

	cmd_vel_publisher = nh.advertise<geometry_msgs::Twist>(cmd_topic, 10);

    ros::Duration(1).sleep();

    // 100 Hz command value
    ros::Rate r(100);

    int i, n;

    // Hardcoded sweeping frequency from 1Hz to 500Hz in log space
    double freq_log_space[30] = {1.0f,	1.23899037094209f,	1.53509713928722f,	1.90197057403762f,	    \
    2.35652322704781f,	2.91970958721362f,	3.61749206450498f,	4.48203783488109f,	5.55320171961581f,  \
    6.88036345850305f,	8.52470407366710f,	10.5620262624044f,	13.0862488367565f,	16.2137363004934f,  \
    20.0886631533056f,	24.8896602120448f,	30.8380493387440f,	38.2080461893409f,	47.3394013211040f,	\
    58.6530624030112f,	72.6705795435965f,	90.0381483052973f,	111.556398767719f,	138.217303890180f,	\
    171.249908617510f,	212.176987801808f,	262.885244821938f,	325.712286997135f,	403.554387286977f,	500.0f};

    // convert the frequency to build the stop time
    stop_time_table[0] = P * (1 / freq_log_space[0]);

    for (int i = 0; i < N; ++i) {
        stop_time_table[i] = stop_time_table[i-1] + P * (1 / freq_log_space[i]);
    }

    chrono::steady_clock::time_point start_time = chrono::steady_clock::now();
    chrono::steady_clock::time_point end_time   = chrono::steady_clock::now();
    auto time_used = chrono::duration<double, std::milli>(end_time - start_time);
    cout << "solve time cost " << time_used.count() << " seconds. " << endl;

    while (ros::ok())
    {
        auto cur_time = chrono::duration<double>(chrono::steady_clock::now() - start_time);
        if (n < N) {
            if(cur_time.count() > stop_time_table[n]) {
                n++;
            }
        }

        double period_time = cur_time.count() - stop_time_table[n - 1];
        double frequency = freq_log_space[n];
        double excit_cmd = gain * sin(2 * M_PI * frequency * period_time);

        r.sleep();
        ros::spinOnce();
    }
}
